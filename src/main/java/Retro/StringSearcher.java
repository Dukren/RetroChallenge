package Retro;

import com.google.common.collect.ArrayListMultimap;
import com.google.common.collect.Multimap;

import java.util.ArrayList;

public class StringSearcher
{
    private String fileName = "";
    private String searchString = "";
    private Multimap<Integer, String> map = ArrayListMultimap.create();

    /**
     * Setter for file name which must be checked for equivalent Strings.
     *
     * @param fileName File name and extension for file containing strings.
     */
    public void setFileName(String fileName) { this.fileName = fileName; }

    /**
     * Setter for string that must be found.
     *
     * @param searchString String that must searched for.
     */
    public void setSearchString(String searchString)
    {
        this.searchString = searchString;
    }

    /**
     * Run method. Executes all class functionality.
     */
    public void runSearch()
    {
        generateMap();
        queryMap(searchString);
    }

    /**
     * Generates a MultiMap using generated key values and string values from file.
     */
    private void generateMap()
    {
        int key;
        FileParser reader = new FileParser();

        ArrayList<String> testList = reader.parseFile(fileName, searchString);

        for (String aTestList : testList)
        {
            key = generateKey(aTestList);
            map.put(key, aTestList);
        }
    }

    /**
     * Generates a key value for a supplied String.
     * Key is generated by summing the ASCII value for each character in the supplied String.
     *
     * @param inputStr String from which a key must be generated
     * @return Key value form supplied string
     */
    private int generateKey(String inputStr)
    {
        int keyVal = 0;
        char[] c_bla = inputStr.toCharArray();

        for (int i = 0; i < c_bla.length; i++)
        {
            keyVal += c_bla[i];
        }

        return keyVal;
    }

    /**
     * Searches the generated MultiMap for all equivalent String values of the query string.
     * Outputs list of equivalent strings if found to console. Else, outputs notification that no equivalent strings were found
     *
     * @param query String that must be tested for equivalency
     */
    private void queryMap(String query)
    {
        int queryKey = generateKey(query);
        if (!map.containsKey(queryKey))
        {
            System.out.println(query + " does not exist in data set.");
        }
        else
        {
            EquivalencyTester eqTest = new EquivalencyTester();
            ArrayList<String> queryList = new ArrayList<String>(map.get(queryKey));
            eqTest.generateEquivalentList(queryList, query);
            System.out.println(query + " is equivalent to the following strings : " + eqTest.getEquivalentList());
        }
    }
}
